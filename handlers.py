"""
Event handlers for the Telegram bot - adapted for webhook deployment
"""

import logging
import os
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, Any

logger = logging.getLogger(__name__)

# Rate limiting storage
user_message_counts = defaultdict(list)

# Target channel ID for Baccarat Kouam√©
TARGET_CHANNEL_ID = -1002682552255

# Target channel ID for predictions and updates
PREDICTION_CHANNEL_ID = -1002891656360

# Configuration constants
GREETING_MESSAGE = """
üé≠ Salut ! Je suis le bot de Joker !
Ajoutez-moi √† votre canal pour que je puisse saluer tout le monde ! üëã

üîÆ Je peux analyser les combinaisons de cartes et faire des pr√©dictions !
Utilisez /help pour voir toutes mes commandes.
"""

WELCOME_MESSAGE = """
üé≠ Bienvenue dans le monde de Joker ! 

üéØ Commandes disponibles :
/start - Accueil
/help - Aide d√©taill√©e  
/about - √Ä propos du bot
/dev - Informations d√©veloppeur
/deploy - Obtenir le fichier de d√©ploiement

üîÆ Fonctionnalit√©s sp√©ciales :
- Pr√©dictions de cartes automatiques
- Analyse des combinaisons
- Gestion des canaux et groupes
"""

HELP_MESSAGE = """
üéØ Guide d'utilisation du Bot Joker :

üìù Commandes de base :
/start - Message d'accueil
/help - Afficher cette aide
/about - Informations sur le bot
/dev - Contact d√©veloppeur

üîÆ Fonctionnalit√©s avanc√©es :
- Le bot analyse automatiquement les messages contenant des combinaisons de cartes
- Il fait des pr√©dictions bas√©es sur les patterns d√©tect√©s
- Gestion intelligente des messages √©dit√©s
- Support des canaux et groupes

üé¥ Format des cartes :
Le bot reconna√Æt les symboles : ‚ô†Ô∏è ‚ô•Ô∏è ‚ô¶Ô∏è ‚ô£Ô∏è

üìä Le bot peut traiter les messages avec format #nXXX pour identifier les jeux.
"""

ABOUT_MESSAGE = """
üé≠ Bot Joker - Pr√©dicteur de Cartes

ü§ñ Version : 2.0
üõ†Ô∏è D√©velopp√© avec Python et l'API Telegram
üîÆ Sp√©cialis√© dans l'analyse de combinaisons de cartes

‚ú® Fonctionnalit√©s :
- Pr√©dictions automatiques
- Analyse de patterns
- Support multi-canaux
- Interface intuitive

üåü Cr√©√© pour am√©liorer votre exp√©rience de jeu !
"""

DEV_MESSAGE = """
üë®‚Äçüíª Informations D√©veloppeur :

üîß Technologies utilis√©es :
- Python 3.11+
- API Telegram Bot
- Flask pour les webhooks
- D√©ploy√© sur Render.com

üìß Contact : 
Pour le support technique ou les suggestions d'am√©lioration, 
contactez l'administrateur du bot.

üöÄ Le bot est open source et peut √™tre d√©ploy√© facilement !
"""

MAX_MESSAGES_PER_MINUTE = 30
RATE_LIMIT_WINDOW = 60

def is_rate_limited(user_id: int) -> bool:
    """Check if user is rate limited"""
    now = datetime.now()
    user_messages = user_message_counts[user_id]

    # Remove old messages outside the window
    user_messages[:] = [msg_time for msg_time in user_messages 
                       if now - msg_time < timedelta(seconds=RATE_LIMIT_WINDOW)]

    # Check if user exceeded limit
    if len(user_messages) >= MAX_MESSAGES_PER_MINUTE:
        return True

    # Add current message time
    user_messages.append(now)
    return False

class TelegramHandlers:
    """Handlers for Telegram bot using webhook approach"""

    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.deployment_file_path = "deployer20.zip"
        # Import card_predictor locally to avoid circular imports
        try:
            from card_predictor import card_predictor
            self.card_predictor = card_predictor
        except ImportError:
            logger.error("Failed to import card_predictor")
            self.card_predictor = None

    def handle_update(self, update: Dict[str, Any]) -> None:
        """Handle incoming Telegram update with enhanced webhook support"""
        try:
            if 'message' in update:
                message = update['message']
                logger.info(f"üîÑ Handlers - Traitement message normal")
                self._handle_message(message)
            elif 'edited_message' in update:
                message = update['edited_message']
                logger.info(f"üîÑ Handlers - Traitement message √©dit√© pour pr√©dictions/v√©rifications")
                self._handle_edited_message(message)
            else:
                logger.info(f"‚ö†Ô∏è Type d'update non g√©r√©: {list(update.keys())}")

        except Exception as e:
            logger.error(f"Error handling update: {e}")

    def _handle_message(self, message: Dict[str, Any]) -> None:
        """Handle regular messages"""
        try:
            chat_id = message['chat']['id']
            user_id = message.get('from', {}).get('id')

            # Rate limiting check (skip for channels/groups)
            chat_type = message['chat'].get('type', 'private')
            if user_id and chat_type == 'private' and is_rate_limited(user_id):
                self.send_message(chat_id, "‚è∞ Veuillez patienter avant d'envoyer une autre commande.")
                return

            # Handle commands
            if 'text' in message:
                text = message['text'].strip()

                if text == '/start':
                    self._handle_start_command(chat_id)
                elif text == '/help':
                    self.send_message(chat_id, HELP_MESSAGE)
                elif text == '/about':
                    self.send_message(chat_id, ABOUT_MESSAGE)
                elif text == '/dev':
                    self.send_message(chat_id, DEV_MESSAGE)
                elif text == '/deploy':
                    self._handle_deploy_command(chat_id)
                elif text.startswith('/redirect'):
                    self._handle_redirect_command(chat_id, text)
                else:
                    # Handle regular messages - check for card predictions even in regular messages
                    self._handle_regular_message(message)

                    # Also process for card prediction in channels/groups (for polling mode)
                    if chat_type in ['group', 'supergroup', 'channel'] and self.card_predictor:
                        self._process_card_message(message)

            # Handle new chat members
            if 'new_chat_members' in message:
                self._handle_new_chat_members(message)

        except Exception as e:
            logger.error(f"Error handling message: {e}")

    def _handle_edited_message(self, message: Dict[str, Any]) -> None:
        """Handle edited messages with enhanced webhook processing for predictions and verification"""
        try:
            chat_id = message['chat']['id']
            chat_type = message['chat'].get('type', 'private')
            user_id = message.get('from', {}).get('id')
            message_id = message.get('message_id')
            sender_chat = message.get('sender_chat', {})
            sender_chat_id = sender_chat.get('id')

            logger.info(f"‚úèÔ∏è WEBHOOK - Message √©dit√© re√ßu ID:{message_id} | Chat:{chat_id} | Sender:{sender_chat_id}")

            # Rate limiting check (skip for channels/groups)
            if user_id and chat_type == 'private' and is_rate_limited(user_id):
                return

            # Process edited messages
            if 'text' in message:
                text = message['text']
                logger.info(f"‚úèÔ∏è WEBHOOK - Contenu √©dit√©: {text[:100]}...")

                # Skip card prediction if card_predictor is not available
                if not self.card_predictor:
                    logger.warning("‚ùå Card predictor not available")
                    return

                # V√©rifier que c'est du canal autoris√©
                if sender_chat_id != TARGET_CHANNEL_ID:
                    logger.info(f"üö´ Message √©dit√© ignor√© - Canal non autoris√©: {sender_chat_id}")
                    return

                logger.info(f"‚úÖ WEBHOOK - Message √©dit√© du canal autoris√©: {TARGET_CHANNEL_ID}")

                # TRAITEMENT MESSAGES √âDIT√âS - Les deux syst√®mes fonctionnent ici
                if self.card_predictor.has_completion_indicators(text):
                    logger.info(f"üéØ √âDITION - Message finalis√© d√©tect√©, traitement des deux syst√®mes")

                    # SYST√àME 1: PR√âDICTION AUTOMATIQUE (SEULEMENT sur messages √©dit√©s)
                    should_predict, game_number, combination = self.card_predictor.should_predict(text)

                    if should_predict and game_number is not None and combination is not None:
                        prediction = self.card_predictor.make_prediction(game_number, combination)
                        logger.info(f"üîÆ PR√âDICTION depuis √âDITION: {prediction}")

                        # Envoyer la pr√©diction au canal sp√©cifique et stocker pour futures v√©rifications
                        sent_message_info = self.send_message(PREDICTION_CHANNEL_ID, prediction)
                        if sent_message_info and isinstance(sent_message_info, dict) and 'message_id' in sent_message_info:
                            next_game = game_number + 1
                            self.card_predictor.sent_predictions[next_game] = {
                                'chat_id': PREDICTION_CHANNEL_ID,
                                'message_id': sent_message_info['message_id']
                            }
                            logger.info(f"üìù Pr√©diction stock√©e pour jeu {next_game}")

                    # SYST√àME 2: V√âRIFICATION (SEULEMENT sur messages √©dit√©s)
                    verification_result = self.card_predictor.verify_prediction_from_edit(text)
                    if verification_result:
                        logger.info(f"üîç V√âRIFICATION depuis √âDITION: {verification_result}")
                        if verification_result['type'] == 'update_message':
                            # Essayer d'√©diter le message original de pr√©diction
                            predicted_game = verification_result['predicted_game']
                            if predicted_game in self.card_predictor.sent_predictions:
                                message_info = self.card_predictor.sent_predictions[predicted_game]
                                edit_success = self.edit_message(
                                    PREDICTION_CHANNEL_ID,
                                    message_info['message_id'],
                                    verification_result['new_message']
                                )
                                if edit_success:
                                    logger.info(f"‚úÖ Message de pr√©diction √©dit√© pour jeu {predicted_game}")
                                else:
                                    self.send_message(PREDICTION_CHANNEL_ID, verification_result['new_message'])
                            else:
                                self.send_message(PREDICTION_CHANNEL_ID, verification_result['new_message'])

                # Gestion des messages temporaires
                elif self.card_predictor.has_pending_indicators(text):
                    logger.info(f"‚è∞ WEBHOOK - Message temporaire d√©tect√©, en attente de finalisation")
                    if message_id:
                        self.card_predictor.pending_edits[message_id] = {
                            'original_text': text,
                            'timestamp': datetime.now()
                        }

        except Exception as e:
            logger.error(f"‚ùå Error handling edited message via webhook: {e}")

    def _process_card_message(self, message: Dict[str, Any]) -> None:
        """Process message for card prediction (works for both regular and edited messages)"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            sender_chat = message.get('sender_chat', {})
            sender_chat_id = sender_chat.get('id')

            # Only process messages from Baccarat Kouam√© channel
            if sender_chat_id != TARGET_CHANNEL_ID:
                logger.info(f"üö´ Message ignor√© - Canal non autoris√©: {sender_chat_id} (attendu: {TARGET_CHANNEL_ID})")
                return

            if not text or not self.card_predictor:
                return

            logger.info(f"üéØ Traitement message CANAL AUTORIS√â pour pr√©diction: {text[:50]}...")
            logger.info(f"üìç Canal source: {sender_chat_id} | Chat destination: {chat_id}")

            # IMPORTANT: Les messages normaux ne font PAS de pr√©diction ni de v√©rification
            # Seuls les messages √âDIT√âS d√©clenchent les syst√®mes de pr√©diction et v√©rification
            logger.info(f"üì® Message normal - AUCUNE ACTION (pr√©diction et v√©rification se font SEULEMENT sur messages √©dit√©s)")

            # Store temporary messages with pending indicators
            if self.card_predictor.has_pending_indicators(text):
                message_id = message.get('message_id')
                if message_id:
                    self.card_predictor.temporary_messages[message_id] = text
                    logger.info(f"‚è∞ Message temporaire stock√©: {message_id}")

        except Exception as e:
            logger.error(f"Error processing card message: {e}")

    def _process_completed_edit(self, message: Dict[str, Any]) -> None:
        """Process a message that was edited and now contains completion indicators"""
        try:
            chat_id = message['chat']['id']
            chat_type = message['chat'].get('type', 'private')
            text = message['text']

            # Only process in groups/channels
            if chat_type in ['group', 'supergroup', 'channel'] and self.card_predictor:
                # Check if we should make a prediction from this completed edit
                should_predict, game_number, combination = self.card_predictor.should_predict(text)

                if should_predict and game_number is not None and combination is not None:
                    prediction = self.card_predictor.make_prediction(game_number, combination)
                    logger.info(f"Making prediction from completed edit: {prediction}")

                    # Send prediction to the chat
                    self.send_message(chat_id, prediction)

                # Also check for verification with enhanced logic for edited messages
                verification_result = self.card_predictor.verify_prediction_from_edit(text)
                if verification_result:
                    logger.info(f"Verification from completed edit: {verification_result}")

                    if verification_result['type'] == 'update_message':
                        self.send_message(chat_id, verification_result['new_message'])

        except Exception as e:
            logger.error(f"Error processing completed edit: {e}")

    def _handle_start_command(self, chat_id: int) -> None:
        """Handle /start command"""
        try:
            self.send_message(chat_id, WELCOME_MESSAGE)
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            self.send_message(chat_id, "‚ùå Une erreur s'est produite. Veuillez r√©essayer.")

    def _handle_deploy_command(self, chat_id: int) -> None:
        """Handle /deploy command by sending deployment zip file"""
        try:
            # Send initial message
            self.send_message(
                chat_id, 
                "üöÄ Pr√©paration du fichier de d√©ploiement... Veuillez patienter."
            )

            # Check if deployment file exists
            if not os.path.exists(self.deployment_file_path):
                self.send_message(
                    chat_id,
                    "‚ùå Fichier de d√©ploiement non trouv√©. Contactez l'administrateur."
                )
                logger.error(f"Deployment file {self.deployment_file_path} not found")
                return

            # Send the file
            success = self.send_document(chat_id, self.deployment_file_path)

            if success:
                self.send_message(
                    chat_id,
                    "‚úÖ Fichier de d√©ploiement envoy√© avec succ√®s !\n\n"
                    "üìã Instructions de d√©ploiement :\n"
                    "1. T√©l√©chargez le fichier zip\n"
                    "2. Cr√©ez un nouveau service sur render.com\n"
                    "3. Uploadez le zip ou connectez votre repository\n"
                    "4. Configurez les variables d'environnement :\n"
                    "   - BOT_TOKEN : Votre token de bot\n"
                    "   - WEBHOOK_URL : https://votre-app.onrender.com\n"
                    "   - PORT : 10000\n\n"
                    "üéØ Votre bot sera d√©ploy√© automatiquement !"
                )
            else:
                self.send_message(
                    chat_id,
                    "‚ùå √âchec de l'envoi du fichier. R√©essayez plus tard."
                )

        except Exception as e:
            logger.error(f"Error handling deploy command: {e}")
            self.send_message(chat_id, "‚ùå Une erreur s'est produite lors du d√©ploiement.")

    def _handle_redirect_command(self, chat_id: int, text: str) -> None:
        """Handle /redirect command to set prediction channel"""
        try:
            parts = text.split()
            if len(parts) < 2:
                self.send_message(chat_id, "‚ùå Usage: /redirect <canal_id>\nExemple: /redirect -1002891656360")
                return
            
            try:
                channel_id = int(parts[1])
                # Update prediction channel in card_predictor
                if self.card_predictor:
                    # Import the module to update the global variable
                    import card_predictor as cp
                    cp.PREDICTION_CHANNEL_ID = channel_id
                    self.send_message(chat_id, f"‚úÖ Canal de pr√©diction mis √† jour vers: {channel_id}")
                    logger.info(f"Prediction channel updated to: {channel_id}")
                else:
                    self.send_message(chat_id, "‚ùå Syst√®me de pr√©diction non disponible")
            except ValueError:
                self.send_message(chat_id, "‚ùå ID de canal invalide. Utilisez un nombre entier.")
                
        except Exception as e:
            logger.error(f"Error handling redirect command: {e}")
            self.send_message(
                chat_id,
                "‚ùå Une erreur s'est produite lors du traitement de votre demande."
            )

    def _handle_regular_message(self, message: Dict[str, Any]) -> None:
        """Handle regular text messages"""
        try:
            chat_id = message['chat']['id']
            chat_type = message['chat'].get('type', 'private')
            text = message.get('text', '')
            message_id = message.get('message_id')

            # In private chats, provide help
            if chat_type == 'private':
                self.send_message(
                    chat_id,
                    "üé≠ Salut ! Je suis le bot de Joker.\n"
                    "Utilisez /help pour voir mes commandes disponibles.\n\n"
                    "Ajoutez-moi √† un canal pour que je puisse analyser les cartes ! üé¥"
                )

            # In groups/channels, analyze for card patterns
            elif chat_type in ['group', 'supergroup', 'channel'] and self.card_predictor:
                # Check if this message has pending indicators
                if message_id and self.card_predictor.should_wait_for_edit(text, message_id):
                    logger.info(f"Message {message_id} has pending indicators, waiting for edit: {text[:50]}...")
                    # Don't process for predictions yet, wait for the edit
                    return

                # Les messages normaux dans les groupes/canaux ne font PAS de pr√©diction ni v√©rification
                # Seuls les messages √âDIT√âS d√©clenchent les syst√®mes
                logger.info(f"üì® Message normal groupe/canal - AUCUNE ACTION (syst√®mes actifs seulement sur √©ditions)")
                logger.info(f"Group message in {chat_id}: {text[:50]}...")

        except Exception as e:
            logger.error(f"Error handling regular message: {e}")

    def _handle_new_chat_members(self, message: Dict[str, Any]) -> None:
        """Handle when bot is added to a channel or group"""
        try:
            chat_id = message['chat']['id']
            chat_title = message['chat'].get('title', 'ce chat')

            for member in message['new_chat_members']:
                # Check if our bot was added (we can't know our own ID easily in webhook mode)
                # So we'll just send greeting when any bot is added
                if member.get('is_bot', False):
                    logger.info(f"Bot added to chat {chat_id}: {chat_title}")
                    self.send_message(chat_id, GREETING_MESSAGE)
                    break

        except Exception as e:
            logger.error(f"Error handling new chat members: {e}")

    def send_message(self, chat_id: int, text: str) -> bool:
        """Send text message to user"""
        try:
            import requests

            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }

            response = requests.post(url, json=data, timeout=10)
            result = response.json()

            if result.get('ok'):
                logger.info(f"Message sent successfully to chat {chat_id}")
                return result.get('result', {})  # Return message info including message_id
            else:
                logger.error(f"Failed to send message: {result}")
                return False

        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return False

    def send_document(self, chat_id: int, file_path: str) -> bool:
        """Send document file to user"""
        try:
            import requests

            url = f"{self.base_url}/sendDocument"

            with open(file_path, 'rb') as file:
                files = {
                    'document': (os.path.basename(file_path), file, 'application/zip')
                }
                data = {
                    'chat_id': chat_id,
                    'caption': 'üì¶ Package de d√©ploiement pour render.com\n\nüéØ Tout est inclus pour d√©ployer votre bot !'
                }

                response = requests.post(url, data=data, files=files, timeout=60)
                result = response.json()

                if result.get('ok'):
                    logger.info(f"Document sent successfully to chat {chat_id}")
                    return True
                else:
                    logger.error(f"Failed to send document: {result}")
                    return False

        except FileNotFoundError:
            logger.error(f"File not found: {file_path}")
            return False
        except Exception as e:
            logger.error(f"Error sending document: {e}")
            return False

    def edit_message(self, chat_id: int, message_id: int, new_text: str) -> bool:
        """Edit an existing message"""
        try:
            import requests

            url = f"{self.base_url}/editMessageText"
            data = {
                'chat_id': chat_id,
                'message_id': message_id,
                'text': new_text,
                'parse_mode': 'HTML'
            }

            response = requests.post(url, json=data, timeout=10)
            result = response.json()

            if result.get('ok'):
                logger.info(f"Message edited successfully in chat {chat_id}")
                return True
            else:
                logger.error(f"Failed to edit message: {result}")
                return False

        except Exception as e:
            logger.error(f"Error editing message: {e}")
            return False